TODO IMAGETOOLS

--------------
high priority
--------------
-onthoudt startdirectory (xml settingsfile), onthoudt windowsize 
-stappen van thumbnails beter definieren (nu is maximum icon size de size waarop je resizede in je generator)
-application icons
--> qt resource file -> icons
-menu bar
-settings pane + settings file (qsettings)
-auto rotate view feature (lossless, EXIF info)
-webalbum dialog close easy (nu x duwen)
-get pictures from device feature, remember where we left off
-viewer met indelingsfeature voor verschillende selecties (A,B,C, ...) en precache


--------------
medium priority
--------------
-about box
-refab met 1 centraal model en maar 1 resizethreadklasse met multiple threads
-in nieuw selectiemodel rowvolgorde makkelijk aanpassen
-double click op thumbnail adds to selection
-drag en drop van thumbnailview naar selectionview
-rijhoogteaanpassingen in selectieview
-sorteermodellen achter de headers --> verandert volgorde van selectie


--------------
low priority
--------------
-extended fool proof datatype checking
-code documentation in english
-translations


--------------
whats this?
--------------

-werken aan de startupconditie dat edit & tree mooi samen lopen
-zorgen dat size rechts uitlijnt, en headers allemaal ook uitlijnen


--------------
-PIXMAP IN ANDERE THREAD
--------------
MAAK GEBRUIK VAN QIMAGE IPV QPIXMAP
http://doc.qt.digia.com/4.4/threads.html#signals-and-slots-across-threads

> Hi,
>
> Can anyone tell what this message
> "QPixmap: It is not safe to use pixmaps outside the GUI thread"
> signify?

Yes - it means that "it is not safe to use pixmaps outside the GUI thread" ;)

Maybe the term "GUI thread" (aka "main thread") is not known to you? Every application has at least one thread, the one originating from your main() function - hence the "main thread". In GUI applications it is also often referred to as "GUI thread", because mostly (depending on the underlying drawing subsystem: X11, GDI, OpenGL, ...) only the main/GUI thread is allowed to draw. "Drawing" also includes modifying widgets (enable/disable, show/hide, setting the state etc), in short: everything which triggers a paint event or accesses system resources such as the graphic card!

QPixmaps are display-dependent (their colour space is dependent on your screen settings: 8bit, 16bit, 32bit depth etc.), so when creating a QPixmap it has to access the resources of the underlying drawing subsystem. Especially X11 is *not* thread-safe (in general - there might be implementations which are), so hence the warning "it is not safe to use pixmaps outside the GUI thread"!

> I am getting a segmentation fault at runtime and most of the time
> this message gets printed just before the crash. Any idea what needs
> to be checked in the program to rectify this?

And the fact that your application indeed crashes should urge you to take this warning very seriously :)

Yes, you *need* to make sure that you don't create/modify QPixmaps in any thread other than the main aka GUI thread!

Obviously your application uses several threads. Probably you have a "worker thread" which produces data which is to be displayed on a QPixmap. One typical design pattern is to have the worker thread emit a "queued signal" across thread boundaries (ie from your worker thread to your main thread):

  http://doc.trolltech.com/4.4/threads.html#signals-and-slots-across-threads

This way your worker thread signals "Hey, I am finished with some work, time to update the GUI" - Qt synchronises Qt::QueuedConnection signals for you and the receiving GUI class can safely create/update the corresponding QPixmap in the context of the GUI thread (in the corresponding slot).

Off course you have to further protect the shared data (the "result" from the worker thread), because in the time when you update your QPixmap in the main thread the worker thread has already continued working and possibly is just about to modify the "result" again, putting it into an "invalid" state etc.

You might want to read also:

  http://doc.trolltech.com/4.4/threads.html#synchronizing-threads
  http://doc.trolltech.com/4.4/threads.html#painting-in-threads
  (Note: it explicitly sais that "Painting onto QPixmaps and QWidgets is not supported.")

And any good book about concurrency.

Cheers, Oliver